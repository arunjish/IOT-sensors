import RPi.GPIO as GPIO 
import time
#import parse
#import urllib.requests

import requests
from requests.exceptions import ConnectionError
 
GPIO.setmode(GPIO.BCM) 
GPIO.setwarnings(False)

TRIG = 23 
ECHO = 24 
LED = 25
#time.sleep(60)

#api="UTX2MK7F8H2H45RD"
#def sender(trash_no,level):

      # if trash_no == 1:
		
        #        payload = {'key': api, 'field1' : str(level)}
       #try :
       	#	r = requests.post("https://api.thingspeak.com/update.json",params=payload)
      	#	print r.text
       #except ConnectionError as e:   
   	#	print
#define sender to upload database
def sender2(bin_no,level):

       if bin_no == 1:

                payload = {'bin_no' : bin_no, 'waste_amt': 40}
       try :
                r = requests.post("http://himamohan.esy.es/waste_bin_script.php",params=payload)
                print r.text
       except ConnectionError as e:
                print

#.... 




f_no,rf_id):

     data = urllib.parse.urlencode({'rf_no': str(rf_no), 'rf_id': rf_id})
     data = data.encode('utf-8')
     request = urllib.request.Request("http://himamohan.esy.es/rfid.php")

     # adding charset parameter to the Content-Type header.
     request.add_header("Content-Type","application/x-www-form-urlencoded;charset=utf-8")

     f = urllib.request.urlopen(request, data)
     # print(f.read().decode('utf-8'))



   		


print "Waste Measurement In Progress" 
GPIO.setup(TRIG,GPIO.OUT) 
GPIO.setup(ECHO,GPIO.IN)
GPIO.setup(LED,GPIO.OUT)
GPIO.output(LED, False)
while True : 
	
	GPIO.output(TRIG, False) 
	print "Waiting For Sensor To Settle" 
	time.sleep(2) 
	GPIO.output(TRIG, True) 
	time.sleep(0.00001) 
	GPIO.output(TRIG, False) 
	while GPIO.input(ECHO)==0:
  		pulse_start = time.time() 
	while GPIO.input(ECHO)==1:
  		pulse_end = time.time() 
	pulse_duration = pulse_end - pulse_start 
	level = pulse_duration * 17150
	print level 
	level = (100 -( (level / 32 )* 100)) 
	level = round(level, 2)
	if level < 5 :
		level = 0
	if level > 80 :
		GPIO.output(LED, True)
	else:
		GPIO.output(LED, False)
 
	print "Level:",level,"  %"
	#sender(1,level)
        sender2(1,level)
	time.sleep(13) 
GPIO.cleanup()
